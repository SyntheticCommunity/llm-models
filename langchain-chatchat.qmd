# 本地知识库

使用 langchain-chatchat 构建本地知识库。

-   使用线上的 embeding 模型和 LLM（ChatGPT）。

要在 **Langchain-Chatchat** 中使用在线的嵌入和ChatGPT服务，您可以按照以下步骤进行配置和实现：

## 步骤概述

### 1. 获取在线嵌入服务的 API 密钥

首先，您需要注册并获取在线嵌入服务的 API 密钥，例如 OpenAI 的嵌入服务。确保您了解该服务的使用限制和费用。

### 2. 安装必要的库

确保您已经安装了 **Langchain** 和 **OpenAI** 的 Python 库。如果尚未安装，可以使用以下命令：

```bash
pip install langchain openai
```

### 3. 配置 Langchain-Chatchat

在您的项目中，您需要配置使用在线嵌入服务。可以在配置文件（如 `config.yaml`）中添加以下内容：

```yaml
openai:
  api_key: "YOUR_API_KEY"
  embedding_model: "text-embedding-ada-002"  # 选择合适的嵌入模型
```

### 4. 创建嵌入实例

在代码中，您可以创建一个嵌入实例，示例如下：

```{python}
from langchain_openai import OpenAIEmbeddings

# 创建嵌入实例
embedding_service = OpenAIEmbeddings(
  openai_api_base = 'https://api.chatanywhere.tech/v1',
  model='text-embedding-ada-002',
  api_key = "sk-J3LQRHr9jn9w5dFgHQP61Vyd5d2IP2HY0wzQ4Ta9xrLz2Jti")
```

### 5. 生成嵌入

使用嵌入实例生成知识库文档的嵌入。例如，您可以将文档内容传递给嵌入服务：

```{python}
documents = ["这是第一篇文档的内容。", "这是第二篇文档的内容。"]
embeddings = embedding_service.embed_documents(documents)
```

### 6. 实现相似性搜索

使用生成的嵌入进行相似性搜索。您可以使用 **FAISS** 或其他向量数据库来查找与用户查询最相关的文档。例如：

```{python}
import faiss
from langchain_community.docstore.in_memory import InMemoryDocstore
from langchain_community.vectorstores import FAISS

# 获取向量维度
index = faiss.IndexFlatL2(len(embedding_service.embed_query("hi")))

# 创建 FAISS 向量存储
vector_store = FAISS(
    embedding_function=embedding_service,
    index=index,
    docstore=InMemoryDocstore(),
    index_to_docstore_id={},
)
```

导入知识库文档。

```{python}
from uuid import uuid4
from langchain_core.documents import Document

# 添加文档嵌入到向量存储
document_1 = Document(
    page_content="I had chocalate chip pancakes and scrambled eggs for breakfast this morning.",
    metadata={"source": "tweet"},
)

document_2 = Document(
    page_content="The weather forecast for tomorrow is cloudy and overcast, with a high of 62 degrees.",
    metadata={"source": "news"},
)

document_3 = Document(
    page_content="Building an exciting new project with LangChain - come check it out!",
    metadata={"source": "tweet"},
)

documents = [
    document_1,
    document_2,
    document_3,
]
uuids = [str(uuid4()) for _ in range(len(documents))]

vector_store.add_documents(documents=documents)
```

```{python}
# 查询相似文档
results = vector_store.similarity_search(
    "LangChain provides abstractions to make working with LLMs easy",
    k=2,
    filter={"source": "tweet"},
)
for res in results:
    print(f"* {res.page_content} [{res.metadata}]")
```

### 7. 结合 ChatGPT 生成回答

将相似文档的内容与用户的问题一起传递给 ChatGPT，以生成更准确的回答：

```{python}
from langchain_openai import ChatOpenAI

# 创建 ChatGPT 实例
chatbot = ChatOpenAI(
    model="gpt-4o-mini-ca",
    temperature=0,
    max_tokens=None,
    timeout=None,
    max_retries=2,
    base_url = 'https://api.chatanywhere.tech/v1',
    api_key = "sk-J3LQRHr9jn9w5dFgHQP61Vyd5d2IP2HY0wzQ4Ta9xrLz2Jti",
)


def answer_question(question):
    # 查找相关文档
    similar_docs = vector_store.similarity_search(embedding_service.embed_query(question))
    
    # 将相关文档内容传递给 ChatGPT
    context = "\n".join(similar_docs)
    response = chatbot({"prompt": f"{context}\n\n{question}"})
    
    return response['choices'][0]['text']

# 示例提问
question = "请解释一下机器学习的基本概念。"
answer = answer_question(question)
print(answer)
```

通过以上步骤，您可以在 **Langchain-Chatchat** 中成功集成在线的嵌入服务，使其能够在回答时利用知识库中的信息，从而提供更丰富和准确的回答。




